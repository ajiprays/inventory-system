# version: '3.8'
services:
  # Product Service
  product-service:
    build: ./product-service
    ports:
      - "8082:8082"
    depends_on:
      kafka:
        condition: service_healthy
      postgres-product:
        condition: service_healthy
      redis:
        condition: service_healthy
      elasticsearch:
        condition: service_healthy
    networks:
      - app-network

  # Stock Change Service
  stock-change-service:
    build: ./stock-change-service
    ports:
      - "8083:8083"
    depends_on:
      kafka:
        condition: service_healthy
      postgres-stock:
        condition: service_healthy
      redis:
        condition: service_healthy
      product-service:
        condition: service_started
    networks:
      - app-network

  # Notification Service
  notification-service:
    build: ./notification-service
    ports:
      - "8084:8084"
    depends_on:
      kafka:
        condition: service_healthy
      redis:
        condition: service_healthy
      product-service:
        condition: service_started
    networks:
      - app-network

  # Analytics Service
  analytics-service:
    build: ./analytics-service
    ports:
      - "8085:8085"
    depends_on:
      kafka:
        condition: service_healthy
      redis:
        condition: service_healthy
      postgres-analytics:
        condition: service_healthy
    networks:
      - app-network

  # PostgreSQL untuk Product Service
  postgres-product:
    image: postgres:15
    environment:
      POSTGRES_USER: user
      POSTGRES_PASSWORD: password
      POSTGRES_DB: product_db
    ports:
      - "5433:5432"
    volumes:
      - postgres-product-data:/var/lib/postgresql/data
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U user -d product_db"]
      interval: 10s
      timeout: 5s
      retries: 5

  # PostgreSQL untuk Stock Change Service
  postgres-stock:
    image: postgres:15
    environment:
      POSTGRES_USER: user
      POSTGRES_PASSWORD: password
      POSTGRES_DB: stock_change_db
    ports:
      - "5434:5432"
    volumes:
      - postgres-stock-data:/var/lib/postgresql/data
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U user -d stock_change_db"]
      interval: 10s
      timeout: 5s
      retries: 5

  # PostgreSQL untuk Analytics Service
  postgres-analytics:
    image: postgres:15
    environment:
      POSTGRES_USER: user
      POSTGRES_PASSWORD: password
      POSTGRES_DB: analytics_db
    ports:
      - "5435:5432"
    volumes:
      - postgres-analytics-data:/var/lib/postgresql/data
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U user -d analytics_db"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis
  redis:
    image: redis:7
    ports:
      - "6379:6379"
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Zookeeper untuk Kafka
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2182:2181"
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "echo ruok | nc -w 2 localhost 2181 | grep imok"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Kafka
  kafka:
    image: confluentinc/cp-kafka:latest
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
#      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    ports:
      - "9092:9092"
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "kafka-topics.sh --bootstrap-server localhost:9092 --list"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Elasticsearch
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.14.0
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    ports:
      - "9200:9200"
    networks:
      - app-network
    volumes:
      - es-data:/usr/share/elasticsearch/data
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9200 || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5

# Jaringan untuk komunikasi antar layanan
networks:
  app-network:
    driver: bridge

# Volume untuk persistensi data PostgreSQL
volumes:
  postgres-product-data:
  postgres-stock-data:
  postgres-analytics-data:
  es-data: